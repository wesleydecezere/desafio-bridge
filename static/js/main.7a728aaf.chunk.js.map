{"version":3,"sources":["components/resultsTable/ResultsTable.tsx","components/header/Header.tsx","components/timeExceededModal/TimeExceededModal.tsx","components/globalStyle/GlobalStyle.ts","utils/request.ts","services/duodigit/duodigit.ts","views/home/Home.tsx","App.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["ResultsTable","data","useState","sort","params","setParams","rows","a","b","s","slice","sortParam","compareVal","compareRows","onSortChange","state","loading","columns","header","name","render","number","sortable","duodigit","time","Header","vSpacing","style","paddingBottom","level","fontStyle","TimeExceededModal","isOpen","setIsOpen","size","onClose","open","alignItems","icon","marginRight","fill","GlobalStyle","createGlobalStyle","BASE_URL","process","REACT_APP_BACKEND_URL","runPost","route","path","concat","method","body","JSON","stringify","headers","fetch","then","res","ok","Error","json","checkSmallestDuodigitMultiple","n","response","hasNumberAlreadyBeenSubmitted","arr","i","length","Home","setNumber","results","setResults","modal","setModal","inputError","setInputError","handleClick","Number","isNaN","record","catch","justifyContent","flexGrow","type","label","placeholder","error","required","onChange","e","parseFloat","target","value","kind","onClick","AppContainer","styled","div","App","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.7a728aaf.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { DataTable } from 'bold-ui';\nimport { RowType } from '../../types';\n\ntype Props = {\n  data: RowType[];\n};\n\nexport const compareRows = (a: RowType, b: RowType, s: string): number => {\n  const [sortParam, compareVal] = s[0] === '-' ? [s.slice(1), -1] : [s, 1];\n  return a[sortParam] > b[sortParam] ? compareVal : -compareVal;\n};\n\nexport const ResultsTable = ({ data }: Props): JSX.Element => {\n  const [params, setParams] = useState({\n    sort: [''],\n  });\n\n  const rows = data.sort((a, b) => compareRows(a, b, params.sort[0]));\n\n  const handleSortChange = (sort: string[]) => setParams((state) => ({ ...state, sort }));\n\n  return (\n    <DataTable<RowType>\n      rows={rows}\n      sort={params.sort}\n      onSortChange={handleSortChange}\n      loading={false}\n      columns={\n        [\n          {\n            header: 'Número',\n            name: 'number',\n            render: ({ number }) => number,\n            sortable: true,\n          },\n          {\n            header: 'Menor múltiplo duodígito',\n            name: 'duodigit',\n            render: ({ duodigit }) => duodigit,\n            sortable: true,\n          },\n          {\n            header: 'Tempo cálculo',\n            name: 'time',\n            render: ({ time }) => time,\n            sortable: true,\n          },\n        ]\n      }\n    />\n  );\n};\n","import React from 'react';\nimport { Heading, Text, VFlow } from 'bold-ui';\n\nexport const Header = (): JSX.Element => (\n  <VFlow vSpacing={0} style={{ paddingBottom: '30px' }}>\n    <Heading level={1}>Calculadora de menor múltiplo duodígito</Heading>\n    <Text aria-label=\"description\" fontStyle=\"italic\">\n      Insira um número real maior que 100. Ao clicar em “Calcular”, o app\n      irá lhe informar qual o menor múltiplo duodígito (somente dois\n      dígitos distintos) do número informado.\n    </Text>\n  </VFlow>\n);\n","import React, { useState } from 'react';\nimport {\n  Heading, HFlow, Icon, Modal, ModalBody,\n} from 'bold-ui';\n\nexport const TimeExceededModal = (): JSX.Element => {\n  const [isOpen, setIsOpen] = useState(true);\n\n  const handleModalClose = () => setIsOpen(false);\n\n  return (\n    <Modal size=\"small\" onClose={handleModalClose} open={isOpen}>\n      <ModalBody>\n        <HFlow alignItems=\"center\">\n          <Icon icon=\"infoCircleOutline\" style={{ marginRight: '0.5rem' }} size={3} fill=\"info\" />\n          <div>\n            <Heading level={1}>Tempo excedido</Heading>\n            <Heading level={5}>A operação solicitada é muito longa</Heading>\n          </div>\n        </HFlow>\n        <p>\n          O servidor está configurado para testar os múltiplos do número informado\n          com fatores de valor até 5 milhões, o que leva cerca de 5 segundos.\n          Caso nenhum destes múltiplos seja duodígito, este erro é retornado.\n        </p>\n      </ModalBody>\n    </Modal>\n  );\n};\n","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: 'IBM Plex Sans', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`;\n","export const BASE_URL = process.env.REACT_APP_BACKEND_URL ?? 'http://localhost:5000';\n","import { RowType } from '../../types';\nimport { BASE_URL } from '../../utils';\n\nexport type PostResponse<DataType> = {\n  ok: boolean,\n  data: DataType,\n};\n\ntype PostData = Record<string, unknown>;\n\nasync function runPost(route: string, data: PostData): Promise<PostResponse<PostData>> {\n  const path = BASE_URL.concat(route);\n  const params = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: { 'content-type': 'application/json' },\n  };\n\n  return fetch(path, params)\n    .then((res) => {\n      if (!res.ok) { throw new Error('Communication has failed'); }\n      return res;\n    })\n    .then((res) => res.json());\n}\n\nasync function checkSmallestDuodigitMultiple(n: number): Promise<RowType> {\n  const route = '/duodigit';\n\n  const response = await runPost(route, { number: n }) as PostResponse<RowType>;\n  if (!response.ok) throw new Error('Operação muito longa...');\n  return response.data;\n}\n\nexport { runPost, checkSmallestDuodigitMultiple };\n","import React, { useState } from 'react';\nimport { VFlow, Button, TextField } from 'bold-ui';\nimport { ResultsTable, TimeExceededModal } from '../../components';\nimport { RowType } from '../../types';\nimport { checkSmallestDuodigitMultiple } from '../../services';\n\nconst hasNumberAlreadyBeenSubmitted = (n: number, arr: RowType[]): boolean => {\n  for (let i = 0; i < arr.length; i += 1) {\n    if (n === arr[i].number) return true;\n  }\n  return false;\n};\n\nexport const Home = (): JSX.Element => {\n  const [number, setNumber] = useState(0);\n  const [results, setResults] = useState<RowType[]>([]);\n  const [modal, setModal] = useState<JSX.Element>();\n  const [inputError, setInputError] = useState('');\n\n  const handleClick = async () => {\n    if (number < 100 || Number.isNaN(number)) {\n      setInputError('Insira um número maior que 100.');\n      return;\n    }\n    if (hasNumberAlreadyBeenSubmitted(number, results)) {\n      setInputError('O número informado já foi processado.');\n      return;\n    }\n    setInputError('');\n\n    await checkSmallestDuodigitMultiple(number)\n      .then((record) => setResults((state) => state.concat(record)))\n      .catch(() => {\n        setModal(<></>);\n        setModal(<TimeExceededModal />);\n      });\n  };\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => setNumber(\n    parseFloat(e.target.value),\n  );\n\n  return (\n    <VFlow\n      vSpacing={2}\n      style={{\n        justifyContent: 'space-between',\n        flexGrow: 1,\n      }}\n    >\n      <TextField\n        type=\"Number\"\n        label=\"Numero\"\n        placeholder=\"Digite um número inteiro maior que 100\"\n        error={inputError}\n        required\n        onChange={handleChange}\n      />\n      <ResultsTable data={results} />\n      <Button\n        kind=\"primary\"\n        size=\"large\"\n        onClick={handleClick}\n      >\n        Calcular\n      </Button>\n      {modal}\n    </VFlow>\n  );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Header } from './components';\nimport { Home } from './views';\n\nconst AppContainer = styled.div`\n  width: 90vw;\n  height: 100vh;\n  padding: 20px 0;\n  margin: auto;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n`;\n\nfunction App(): JSX.Element {\n  return (\n    <AppContainer>\n      <Header />\n      <Home />\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from './components';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <GlobalStyle />\n    <App />\n  </>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}